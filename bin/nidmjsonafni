#!/usr/bin/python
"""
Export neuroimaging results created with FSL feat following NIDM-Results

DC code convergence
"""
import json
import sys
from subprocess import check_call

# nidmjsonafni ttest++_result+tlrc.BRIK

if __name__ == "__main__":
    # Remove first argument (script name)
    num_args = len(sys.argv)-1
    sys.argv.pop(0)
    args = sys.argv

    usage = "Usage: nidmafni path/to/feat/dir"

    if num_args != 1:
        raise Exception(usage)

    resbrik = args[0]
    print(resbrik)

    data = {}
    data['NeuroimagingAnalysisSoftware_type'] = "AFNI"
    # Is the version of AFNI that was used for the analysis stored somwhere?
    data['NeuroimagingAnalysisSoftware_softwareVersion'] = "TODO"
    # TODO rethink in NIDM
    # data['Data_grandMeanScaling']
    data['Data_targetIntensity'] = 100
    data['DesignMatrix_atLocation'] = "TODO"
    data['DesignMatrix_regressorNames'] = ["group"]

    check_call([
        # 3dAFNItoNIFTI -prefix <NAME> <RES_BRIK>[0]
        '3dAFNItoNIFTI', '-prefix', 'ParameterEstimate', resbrik + '[0]'])
    data['ParameterEstimateMaps'] = ["ParameterEstimate.nii"]
    data['ErrorModel_hasErrorDistribution'] = "obo_NormalDistribution"
    data['ErrorModel_errorVarianceHomogeneous'] = True
    # TODO:  check
    data['ErrorModel_varianceMapWiseDependence'] = "nidm_IndependentParameter"
    data['ErrorModel_hasErrorDependence'] = "nidm_IndependentError"
    data['ErrorModel_depemdenceMapWiseDependence'] = \
        "nidm_IndependentParameter"
    data['ModelParameterEstimation_withEstimationMethod'] = \
        "obo_OrdinaryLeastSquaresEstimation"

    # TODO residualmeansquares
    data['ResidualMeanSquaresMap_atLocation'] = "TODO"
    # TODO GrandMeanMap --> not needed
    data['GrandMeanMap_atLocation'] = "TODO"

    # TODO MaskMap_atLocation
    data['MaskMap_atLocation'] = "TODO"

    # TODO CoordinateSpace_inWorldCoordinateSystem
    data['CoordinateSpace_inWorldCoordinateSystem'] = "TODO"

    data['Contrasts'] = []
    check_call([
        # 3dAFNItoNIFTI -prefix <NAME> <RES_BRIK>[0]
        '3dAFNItoNIFTI', '-prefix', 'Contrast', resbrik + '[0]'])
    check_call([
        # 3dAFNItoNIFTI -prefix <NAME> <RES_BRIK>[1]
        '3dAFNItoNIFTI', '-prefix', 'TStatistic', resbrik + '[1]'])

    data['Contrasts'].append({
            # TODO: do we want specific names?
            "StatisticMap_contrastName": "group",
            "ContrastWeightMatrix_value": [1],
            "StatisticMap_statisticType": "obo_TStatistic",
            # degrees of freedom
            "StatisticMap_errorDegreesOfFreedom": "TODO",
            "StatisticMap_atLocation": "TStatistic.nii",
            # TODO inworldcoordsyst
            "StatisticMap_inWorldCoordinateSystem": "TODO",
            "ContrastMap_atLocation": "Contrast.nii",
            # TODO inworldcoordsyst
            "ContrastMap_inWorldCoordinateSystem": "TODO",
            # TODO ContrastStandardErrorMap_atLocation
            "ContrastStandardErrorMap_atLocation": "TODO"
        })
    # TODO connectivity criterion
    data['ClusterDefinitionCriteria_hasConnectivityCriterion'] = "TODO"
    # TODO PeakDefinitionCriteria_minDistanceBetweenPeaks
    data['PeakDefinitionCriteria_minDistanceBetweenPeaks'] = "TODO"
    # TODO PeakDefinitionCriteria_maxNumberOfPeaksPerCluster
    data['PeakDefinitionCriteria_maxNumberOfPeaksPerCluster'] = "TODO"

    print(json.dumps(data, indent=4))
